// Code generated using gensrcmods.go; DO NOT EDIT.

package ext

// SourceModules are source type standard library modules.
var SourceModules = map[string]string{
	"bootstrap": "sys:=import(\"sys\")\nenum:=import(\"enum\")\nlog:=import(\"log\")\ndatabase:=import(\"database\")\ncron:=import(\"cron\")\nhttp:=import(\"http\")\n\n//使用数据，有序初始化\n_bootloader:=[\n    {\n        name:\"databasse\",\n        init:func(){\n            if is_undefined(sys.prop(\"database\")){\n                log.info(\"no database found,skipped\")\n                return\n            }\n            enum.each(\n                sys.require(sys.prop(\"database\")),\n                func(k,v){\n                    log.infof(\"initialize database:%s\",k)\n                    d:=sys.require(database.open(k,v.driver,v.dsn))\n                    if v.max_open{\n                        d.set_max_open(v.max_open)\n                    }\n                }\n            )\n        }\n    },{\n        name:\"cron service\",\n        init:func(){\n            if is_undefined(sys.prop(\"cron\")){\n                log.info(\"no cron config,skiped\")\n                return\n            }\n            cron_config:=sys.require(sys.prop(\"cron\"))\n            if cron_config.storage {\n                log.infof(\"cron storage:%s\",cron_config.storage)\n                cron.set_data_dir(cron_config.storage)\n            }\n            cron_srv:=undefined\n            if is_undefined(cron_config.name){\n                log.info(\"use default cron configuration\")\n                cron_srv=cron.boot()\n            }else{\n                log.info(\"use user defined cron configuration\",cron_config.name)\n                cron_srv=sys.must(cron.new({name:cron_config.name}))\n            }\n            if is_undefined(cron_srv){\n                sys.exit()\n            }\n            log.info(\"start cron service\")\n            cron_srv.start()\n        }\n    },{\n        name:\"http server\",\n        init:func(){\n            if is_undefined(sys.prop(\"http\")){\n                log.info(\"no http server config,skipped\")\n                return\n            }\n            http_cfg:=sys.require(sys.prop(\"http\"))\n            http_server:=sys.require(http.server({addr:http_cfg.addr}))\n            enum.each(\n                http_cfg.handlers,\n                func(k,v){\n                    log.infof(\"listen script %s:%s\",k,v)\n                    http_server.handle(k,v)\n                }\n            )\n            enum.each(\n                http_cfg.static,\n                func(k,v){\n                    log.infof(\"listen static %s: %s\",k,v)\n                    http_server.handle_static(k,v)\n                }\n            )\n            http_server.start()\n\n        }\n    }\n]\nexport{\n    run:func(){\n        enum.each(_bootloader,func(idx,f){\n            log.infof(\"%s:bootstrap %s\",idx+1,f.name)\n            f.init()\n        })\n    },\n    register:func(name,f){\n        _bootloader=append(_bootloader,{\n            \"name\":name,\n            \"init\":f\n        })\n    }\n}\n",
	"export_all": " export func(m){\n        fnTable:={}\n        fns:=[]\n        for n,f in m{\n            fnTable[n]=f\n            fns=append(fns,f)\n        }\n        fnTable[\"all\"]=fns\n        return fnTable\n}",
	"flow": "\ntext:=import(\"text\")\nexport {\n    switch:func(condition,fmap){\n        if is_undefined(condition){\n            condition=\"undefined\"\n        }\n        f:=fmap[condition]\n        if f{\n            if is_function(f){\n                return f()\n            }else{\n                return f\n            }\n        }\n        f=fmap[\"default\"]\n        if f{\n            if is_function(f){\n                return f()\n            }else{\n                return f\n            }\n        }\n    },\n    match:func(txt,fnMap){\n        for k,v in fnMap{\n            if text.re_match(k,txt) && is_function(v){\n                return v()\n            }\n        }\n    },\n    batch:func(fnList){\n        for fn in fnList{\n            fn()\n        }\n    },\n    stream:func(input,fnList){\n        result:=input\n        for fn in fnList{\n            result=fn(result)\n            if is_error(result){\n                return result\n            }\n        }\n        return result\n    },\n    each:func(data,fn){\n        for l in data{\n            fn(l)\n        }\n    },\n    //snippet:name=flow.ever;prefix=ever;body=ever(${input},${funcList});desc=call ever function from fnList with argument input;\n    ever:func(input,fnList){\n        result:=[]\n        for fn in fnList{\n            if is_callable(fn){\n                r:=fn(input)\n                if is_error(r){\n                    return r\n                }else{\n                    result=append(result,r)\n                }\n            }\n        }\n        return result\n    },\n    //snippet:name=flow.map;prefix=map;body=map(${fn},${list});desc=map表示对一个列表（List）中的每个元素做计算;\n    map:func(fn,list){\n        if is_array(list)|| is_immutable_array(list){\n            result:=[]\n            for l in list{\n                r:=fn(l)\n                if is_error(r){\n                    return r\n                }else{\n                    result=append(result,r)\n                }\n            }\n            return result\n        }else if is_map(list)||is_immutable_map(list){\n            result:={}\n            for k,v in list{\n                r:=fn(k,v)\n                if is_error(r){\n                    return r   \n                }else{\n                    result[k]=r\n                }\n            }\n            return result\n        }\n        return undefined\n    },\n    //snippet:name=flow.reduce;prefix=reduce;body=reduce(${fn},${list});desc=reduce表示对一个列表中的每个元素做迭代计算;\n    reduce:func(fn,list){\n        if len(list)<=0{\n            return undefined\n        }\n        last:=list[0]\n        for i:=1;i<len(list);i++{\n            last=fn(last,list[i])\n        }\n        return last\n    }\n}",
	"web": "export {\n    dispatch:func(controller,action,request,response){\n        c:=import(controller)\n        c[action](request,response)\n    }\n}",
}
